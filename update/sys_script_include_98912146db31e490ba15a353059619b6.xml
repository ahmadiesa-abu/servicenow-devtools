<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_devtools.DocumentationAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The DocumentationAPI helps to render fragments of an HTML page that documents the components of a scoped application.</description>
        <name>DocumentationAPI</name>
        <script><![CDATA[var DocumentationAPI = Class.create();
DocumentationAPI.prototype = {
    
	initialize: function(strAppSysId)
	{
		this.m_bInit = false;
		this.m_strAppName = 'UNDEFINED';
		this.m_strAppVersion = '';
		this.m_strScope = '';
		this.m_bGitHubRepeat = false;
		this.m_bTestSuiteRepeat = false;
		
		this.m_strAppSysId = GetStringValue(strAppSysId);
		var grApp = new GlideRecord('sys_app');
		if (grApp.get(this.m_strAppSysId) == true)
		{
			this.m_bInit = true;
			this.m_strAppName = GetStringValue(grApp.getValue('name'));
			this.m_strAppVersion = GetStringValue(grApp.getValue('version'));
			this.m_strScope = GetStringValue(grApp.getValue('scope'));
		}
    
	},
	
	RenderHeader: function()
	{
		return '<h1>'+this.m_strAppName+' '+this.m_strAppVersion+'</h1>';
	},
	
	RenderListItem: function(strItem, strURL, strText)
	{
		strURL = GetStringValue(strURL);
		strText = GetStringValue(strText);
		var strHTML = '';
		strHTML += '<li>';
		if (strURL != '')
		{
			strHTML += HtmlRenderLink(strURL,strItem,true);
		}
		else
		{
			strHTML += '<b>'+strItem +'</b>&#160;';
		}
		if (strText != '')
		{
			strHTML += '<p>'+strText+'</p>';
		}
		strHTML += '</li>';		
		return strHTML;
	},
	
	RenderCopyright: function(nCopyrightYear, strCopyrightHolder)
	{
		var strYear = '';
		nCopyrightYear = GetIntegerValue(nCopyrightYear);
		strCopyrightHolder = GetStringValue(strCopyrightHolder);
		var datenow = new Date(GetTimeNow());
		var nCurrentYear = GetIntegerValue(datenow.getFullYear());
		if (nCurrentYear == nCopyrightYear)
		{
			strYear = GetStringValue(nCopyrightYear);
		}
		else
		{
			strYear = GetStringValue(nCopyrightYear)+'-'+GetStringValue(nCurrentYear);
		}
		return '<p>Copyright '+strYear+' by '+strCopyrightHolder+'</p>';
	},
	
	RenderDisclaimer: function()
	{
		var strHTML = '';
		strHTML += '<p>'+GetAppName(this.m_strAppSysId)+' is NOT an officially supported ServiceNow product.</p>';
		strHTML += '<p>'+GetAppName(this.m_strAppSysId)+' does NOT come with any kind of warranty. If you use it, you own it!</p>';
		return strHTML;
	},	
	
	RenderLicense: function()
	{
		var strLicense = '';
		
		strLicense += '<p>Licensed under the Apache License, Version 2.0 (the "License")</p>';
		strLicense += '<p>You may not use '+this.m_strAppName+' except in compliance with the License.</p>';
		strLicense += '<p>You may obtain a copy of the License at: '+HtmlRenderLink('https://www.apache.org/licenses/LICENSE-2.0','',true)+'</p>';
		strLicense += '<p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>';
		return strLicense;
	},
	
	RenderRoles: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grUR = new GlideRecord('sys_user_role');
		grUR.addQuery('sys_scope','=',this.m_strAppSysId);
		grUR.orderBy('name');
		grUR.query();

		var strHTML = '<ul>';
		while (grUR.next())
		{
			strHTML += this.RenderListItem(
				grUR.getValue('name'),
				GetInstanceRecordURI('sys_user_role',grUR.sys_id),
				grUR.getValue('description'))
		}
		strHTML += '</ul>';
		return strHTML;			
	},
	
	RenderProperties: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grSP = new GlideRecord('sys_properties');
		grSP.addQuery('sys_scope','=',this.m_strAppSysId);
		grSP.orderBy('name');
		grSP.query();

		var strHTML = '<ul>';
		while (grSP.next())
		{
			var strDescription = HtmlEncode(grSP.getValue('description'));
			strHTML += this.RenderListItem(
				grSP.getValue('name'),
				'/sys_properties.do?sys_id='+grSP.sys_id,
				strDescription);
		}
		strHTML += '</ul>';
		return strHTML;	
	},
	
	RenderEvents: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grEvent = new GlideRecord('sysevent_register');
		grEvent.addQuery('sys_scope','=',this.m_strAppSysId);
		grEvent.orderBy('event_name');
		grEvent.query();

		var strHTML = '<ul>';
		while (grEvent.next())
		{
			strHTML += this.RenderListItem(
				grEvent.getValue('event_name'),
				'',
				grEvent.getValue('description'));
		}
		strHTML += '</ul>';
		return strHTML;			
	},
	
	RenderUIActions: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSUA = new GlideRecord('sys_ui_action');
		grSUA.addQuery('sys_scope','=',this.m_strAppSysId);
		grSUA.orderBy('name');
		grSUA.addActiveQuery();
		grSUA.query();

		var strHTML = '<ul>';
		while (grSUA.next())
		{
			var strName = grSUA.getValue('name');
			var strTable = grSUA.getValue('table');
			var strComments = GetStringValue(grSUA.getValue('comments'));

			strHTML += this.RenderListItem(
				strName + ' ('+strTable+')',
				'/sys_ui_action.do?sys_id='+grSUA.sys_id,
				strComments);
		}
		strHTML += '</ul>';
		return strHTML;
	},
	
	
	RenderScriptIncludes: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSSI = new GlideRecord('sys_script_include');
		grSSI.addQuery('sys_scope','=',this.m_strAppSysId);
		grSSI.addQuery('access','=','public');
		grSSI.orderBy('name');
		grSSI.query();

		var strHTML = '<ul>';
		while (grSSI.next())
		{
			var strDescription = HtmlEncode(grSSI.getValue('description'));
			
			strHTML += this.RenderListItem(
				grSSI.getValue('name'),
				'/sys_script_include.do?sys_id='+grSSI.sys_id,
				strDescription);
		}
		strHTML += '</ul>';
		return strHTML;
	},
	
	
	RenderUIScripts: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSUS = new GlideRecord('sys_ui_script');
		grSUS.addQuery('sys_scope','=',this.m_strAppSysId);
		grSUS.addQuery('active','=','true');
		grSUS.orderBy('name');
		grSUS.query();

		var strHTML = '<ul>';
		while (grSUS.next())
		{
			//var strDescription = HtmlEncode(grSUS.getValue('description'));
			
			strHTML += this.RenderListItem(
				grSUS.getValue('script_name'),
				'/sys_ui_script.do?sys_id='+grSUS.sys_id,
				grSUS.getValue('description'));
		}
		strHTML += '</ul>';
		return strHTML;
	},	

	RenderBusinessRules: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSS = new GlideRecord('sys_script');
		grSS.addQuery('sys_scope','=',this.m_strAppSysId);
		grSS.orderBy('name');
		grSS.addActiveQuery();
		grSS.query();

		var strHTML = '<ul>';
		while (grSS.next())
		{
			var strName = grSS.getValue('name');
			var strCollection = grSS.getValue('collection');
			
			strHTML += this.RenderListItem(
				strName +' ('+strCollection+')',
				'/sys_script.do?sys_id='+grSS.sys_id,
				'');
		}
		strHTML += '</ul>';
		return strHTML;
	},
	
	
	RenderTestStepConfigurations: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}	
		var grSC = new GlideRecord('sys_atf_step_config');
		grSC.addQuery('sys_scope','=',this.m_strAppSysId);
		grSC.orderBy('name');
		grSC.query();

		
		var strHTML = '<ul>';
		while (grSC.next())
		{
			var strDescription = GetStringValue(grSC.getValue('html_description'));
			strDescription = strDescription.replace('<p>','');
			strDescription = strDescription.replace('</p>','');
						
			strHTML += this.RenderListItem(
				grSC.getValue('name'),
				'/sys_atf_step_config.do?sys_id='+grSC.sys_id,
				strDescription);
		}
		strHTML += '</ul>';
		return strHTML;	
	},
	
	RenderExtensionPoints: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSEP = new GlideRecord('sys_extension_point');
		grSEP.addQuery('sys_scope','=',this.m_strAppSysId);
		grSEP.addQuery('restrict_scope','=','false');
		grSEP.orderBy('name');
		grSEP.query();

		var strHTML = '<ul>';
		while (grSEP.next())
		{
			strHTML += this.RenderListItem(
				grSEP.getValue('name'),
				'/sys_extension_point.do?sys_id='+grSEP.sys_id,
				grSEP.getValue('description') + '<pre>'+grSEP.getValue('example')+'</pre>');
		}
		strHTML += '</ul>';
		return strHTML;
	},	
	
	RenderInstanceScanChecks: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSC = new GlideRecord('scan_check');
		grSC.addQuery('sys_scope','=',this.m_strAppSysId);
		grSC.orderBy('name');
		grSC.query();

		var strHTML = '<ul>';
		while (grSC.next())
		{
			strHTML += this.RenderListItem(
				grSC.getValue('name'),
				'/scan_check.do?sys_id='+grSC.sys_id,
				grSC.getValue('short_description'));
		}
		strHTML += '</ul>';
		return strHTML;
	},
	
	RenderEditorMacros: function()
	{
		if (this.m_bInit == false)
		{
			return this.RenderError();
		}
		var grSEM = new GlideRecord('syntax_editor_macro');
		grSEM.addQuery('sys_scope','=',this.m_strAppSysId);
		grSEM.orderBy('name');
		grSEM.query();

		var strHTML = '<ul>';
		while (grSEM.next())
		{
			var strDescription = HtmlEncode(grSEM.getValue('comments'));
			var strText = GetStringValue(grSEM.getValue('text'));
			
			strHTML += this.RenderListItem(
				grSEM.getValue('name'),
				GetInstanceRecordPath('syntax_editor_macro',grSEM.sys_id),
				strDescription + '<br/>' + '<pre>'+strText+'</pre>');
		}
		strHTML += '</ul>';
		return strHTML;
	},	
	
	
	RenderSystemRequirements: function(aSupportedReleases,bGitHubAccessRequired,aDependencies)
	{
		aSupportedReleases = GetArrayValue(aSupportedReleases);
		var strHTML = '';
		
		if (aSupportedReleases.length > 0)
		{
			strHTML += '<li>';
			for (var nRelease = 0; nRelease < aSupportedReleases.length; nRelease++)
			{
				var strRelease = aSupportedReleases[nRelease];
				strHTML += strRelease;
				if (nRelease == aSupportedReleases.length - 2)
				{
					strHTML += ' or ';
				}
				else if (nRelease < aSupportedReleases.length - 1)
				{
					strHTML += ', ';
				}
			}
			strHTML += '</li>';
		}
		
		if (bGitHubAccessRequired == true)
		{
			strHTML += '<li>Access to&#160;<a href="https://www.github.com" target="_blank">GitHub.com</a></li>';
		}
		
		aDependencies = GetArrayValue(aDependencies);
		for (var nDependency = 0; nDependency < aDependencies.length; nDependency++)
		{
			dependency = aDependencies[nDependency];
			var strAppName = GetStringValue(GetValue(dependency,'name'));
			if (strAppName != '')
			{
				var strVersion = GetStringValue(GetValue(dependency,'version'));
				var strUrl = GetStringValue(GetValue(dependency,'url'));
				strHTML += '<li>';
				if (strUrl != '')
				{
					strHTML += '<a href="'+strUrl+'" target="_blank">';
				}
				strHTML += strAppName+' '+strVersion;
				if (strUrl != '')
				{
					strHTML += '</a>';
				}
				strHTML += '</li>';
			}
		}
		return strHTML;
	},	
	
	RenderInstallationInstructionsImportFromSourceControl: function(strAppName, strRepoURL, bAdditionalSteps)
	{
		bAdditionalSteps = GetBoolValue(bAdditionalSteps);
		var strHTML = '';
		if (this.m_bGitHubRepeat == false)
		{
			this.m_bGitHubRepeat = true;
			strHTML += '<li>Create an account on&#160;<a href="https://github.com/" target="_blank">GitHub</a>&#160;- if not done already.</li>';
			strHTML += '<li>Create a&#160;<a href="https://github.com/settings/tokens" target="_blank">personal access token</a>&#160;for your GitHub account.</li>';
			strHTML += '<li>Paris or later: Add&#160;<a href="/discovery_credentials_list.do" target="_blank">credentials</a>&#160;to access GitHub - use "Basic Auth".</li>';
		}
		strHTML += '<li>Fork the repository&#160;<a href="'+strRepoURL+'" target="_blank">'+strRepoURL+'</a>.</li>';
		strHTML += '<li>Go to&#160;<a href="/$studio.do" target="_blank">Studio</a>&#160;and import the '+strAppName+' application from source control.</li>';
		if (bAdditionalSteps == true)
		{
			strHTML += '<li>Perform all installation steps documented for the '+strAppName+' application.</li>';
		}
		return strHTML;
	},

	RenderInstallationInstructionsBackgroundScript: function(strText, strScript, strScope)
	{
		var strText = GetStringValue(strText);
		var strScript = GetStringValue(strScript);
		var strScope = GetStringValue(strScope);
		if (strScope == '')
		{
			strScope = this.m_strScope;
		}
		if (strText != '')
		{
			strText += '<br/>';
		}
		var strHTML = '';
		strHTML +=	'<li>'+strText+'Run the following script as a <a href="/sys.scripts.do" target="_blank">background script</a> in scope&#160;<b>'+strScope+'</b>:</li>';
		strHTML +=	'<pre>'+strScript+'</pre>';
		return strHTML;
	},

	
	RenderInstallationInstructionsConfigureTableCrossScopeAccess: function(strTable)
	{
		var strTable = GetStringValue(strTable);
		if (strTable == '')
		{
			return '';
		}
		var strHTML = this.RenderInstallationInstructionsBackgroundScript(
			'Enable create, read, write and delete operations for all applications on the table&#160;<a href="/sys_db_object.do?sys_id='+strTable+'&amp;sysparm_refkey=name" target="_blank">'+strTable+'</a>.',
		"var grRecord = new GlideRecord('sys_db_object');\n"
		+"grRecord.addQuery('name','=','"+strTable+"');\n"
		+"grRecord.query();\n"
		+"if (grRecord.next())\n"
		+"{\n"
		+"   grRecord.access = 'public';\n"
		+"   grRecord.read_access = 'true';\n"
		+"   grRecord.create_access = 'true';\n"
		+"   grRecord.update_access = 'true';\n"
		+"   grRecord.delete_access = 'true';\n"
		+"   grRecord.update();\n"
		+"}\n"
		+"gs.invalidateCache();",
		'global');
		return strHTML;
	},	
	

	RenderInstallationInstructionsAppInstall: function(strScope)
	{
		var strScope = GetStringValue(strScope);
		if (strScope == '')
		{
			strScope = this.m_strScope;
		}
		var strHTML = this.RenderInstallationInstructionsBackgroundScript(
			'The '+strScope+'.AppInstall() function must be executed.',
			strScope+'.AppInstall();');
		return strHTML;
	},
	
	RenderInstallationInstructionsRunTestSuite: function(strTestSuiteSysId)
	{
		var strHTML = '';
		var grTestSuite = new GlideRecord('sys_atf_test_suite');
		if (grTestSuite.get(strTestSuiteSysId) != false)
		{
			if (this.m_bTestSuiteRepeat == false)
			{
				this.m_bTestSuiteRepeat = true;
				strHTML += '<li>Set the&#160;<a href="/nav_to.do?uri=sys_properties.do?sys_id=99ca5ab55b1022001f80efe5f0f91a05" target="_blank">sn_atf.runner.enabled system property</a>&#160;to "true" to activate the ATF test execution - if not set already.</li>';
			}

			strHTML += '<li>Run the&#160;<a href="/sys_atf_test_suite.do?sys_id='+strTestSuiteSysId+'&sysparm_view=devtools&sysparm_view_forced=true" target="_blank">'+grTestSuite.name+'</a> test suite.</li>';
		}
		return strHTML;
	},
	
	RenderError: function()
	{
		return '<p style="color:red">ERROR: DocumentationAPI is not initialized!</p>';
	},

    type: 'DocumentationAPI'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-01-20 15:26:20</sys_created_on>
        <sys_id>98912146db31e490ba15a353059619b6</sys_id>
        <sys_mod_count>110</sys_mod_count>
        <sys_name>DocumentationAPI</sys_name>
        <sys_package display_value="DevTools WORK IN PROGRESS" source="x_snc_devtools">d689f6901bd38450a89720a8ec4bcbfd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DevTools WORK IN PROGRESS">d689f6901bd38450a89720a8ec4bcbfd</sys_scope>
        <sys_update_name>sys_script_include_98912146db31e490ba15a353059619b6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-09-16 23:03:55</sys_updated_on>
    </sys_script_include>
</record_update>
